name: libusb

on:
  push:
    paths:
      - libusb/**
      - .github/workflows/libusb.yml

permissions:
  contents: write

# env:
#   CMAKE_CXX_COMPILER_LAUNCHER: ccache

jobs:
  libusb_matrix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { platform: emscripten, os: ubuntu-latest, toolchain: emscripten }
          - { platform: linux64, os: ubuntu-latest, toolchain: llvm }
          - { platform: macos, os: macos-26, toolchain: apple-llvm }
          - { platform: vs, os: windows-latest, toolchain: vs-stable }
          - {
              platform: rpi-aarch64,
              os: ubuntu-latest,
              prefix: aarch64-linux-gnu,
              toolchain: aarch64-linux-gnu-gcc,
            }
          - {
              platform: rpi-armv6l,
              os: ubuntu-latest,
              prefix: arm-linux-gnueabihf,
              toolchain: arm-linux-gnueabihf-gcc,
            }
          - {
              platform: msys2,
              os: ubuntu-latest,
              prefix: mingw-w64,
              toolchain: x86_64-w64-mingw32-gcc,
              # params: -t gcc -a x86_64-w64-mingw32,
              # shell: bash,
            }

    runs-on: ${{ matrix.os }}
    # env:
    #   PLATFORM: ${{ matrix.platform }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workflow }}
    steps:
      - uses: actions/checkout@v5

      # - name: ccache
      #   uses: hendrikmuhs/ccache-action@v1.2.19
      #   with:
      #     key: ${{ runner.os }}-${{ matrix.platform }}-ccache

      # - uses: git-for-windows/setup-git-for-windows-sdk@v1
      #   if: runner.os == 'Windows'
      #   with:
      #     flavor: minimal

      # - name: Test Shell
      #   run: |
      #     # ps -p $$
      #     echo $SHELL
      #     # ls -alF
      #     ls
      #     # tree -h

      - name: MSYS2 Apt Cross Compile
        if: matrix.platform == 'msys2' && runner.os == 'Linux'
        run: |
          sudo apt install gcc-${{ matrix.prefix }} g++-${{ matrix.prefix }} binutils-${{ matrix.prefix }}

      - name: Emscripten Install
        if: matrix.platform == 'emscripten'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.15
          actions-cache-folder: "emsdk-cache"

      - name: Verify emsdk
        if: matrix.platform == 'emscripten'
        run: |
          emcc -v
          emsdk update
          emsdk install latest
          emsdk activate latest
          emcc -v

      - name: RPI - Cross compiling tools
        if: matrix.platform == 'rpi-aarch64' || matrix.platform == 'rpi-armv6l'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: multistrap gcc-${{matrix.prefix}} g++-${{matrix.prefix}}
          version: 1.0

      # - name: RPI - multistrap
      #   if: matrix.platform == 'rpi-aarch64' || matrix.platform == 'rpi-armv6l'
      #   shell: bash
      #   run: |
      #     mkdir -p raspbian/etc/apt/apt.conf.d/
      #     echo 'Acquire::AllowInsecureRepositories "true";' | sudo tee raspbian/etc/apt/apt.conf.d/90insecure
      #     multistrap -a arm64 -d raspbian -f ../multistrap.conf

      - name: Apt Packages for Linux
        # if: runner.os == 'Linux'
        if: matrix.platform == 'linux64'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libudev-dev
          version: 1.0

      - name: Install Chalet
        uses: jaxxstorm/action-install-gh-release@v2.1.0
        with:
          repo: chalet-org/chalet
          cache: enable
          extension: .zip
          prerelease: "false"

      - name: Chalet Test
        run: |
          chalet --version

      - name: Chalet Configure
        if: matrix.toolchain != ''
        run: |
          chalet configure --toolchain ${{ matrix.toolchain }}
        # chalet configure --toolchain ${{ matrix.toolchain }} -a auto

      - name: Chalet Bundle
        run: |
          chalet bundle --show-commands
        # chalet bundle --compiler-cache --show-commands

      - name: LS check built lib
        run: |
          unzip dist/*.zip
          ls -alfR dist

      - name: Rename and Publish Release
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          mv dist/${{ github.workflow }}.zip oflib_${{ github.workflow }}_${{ matrix.platform }}.zip
          ls -alF *.zip
          gh release upload v0.12.1 *.zip --clobber
