name: _test

on:
  push:
    paths:
      # - test/**
      - .github/workflows/_test.yml

permissions:
  contents: write

jobs:
  _test:
    strategy:
      matrix:
        cfg:
          # - { platform: emscripten, os: ubuntu-latest, toolchain: emscripten }
          # - { platform: linux64, os: ubuntu-latest, toolchain: llvm }
          # - { platform: ios, os: macos-latest, toolchain: apple-llvm }
          # - { platform: osx, os: macos-latest, toolchain: apple-llvm }
          - { platform: macos, os: macos-latest, toolchain: apple-llvm }
          - { platform: vs, os: windows-latest, toolchain: vs-stable }
          # - {
          #     platform: rpi-aarch64,
          #     os: ubuntu-latest,
          #     prefix: aarch64-linux-gnu,
          #     toolchain: aarch64-linux-gnu-gcc,
          #   }
          # - {
          #     platform: rpi-armv6l,
          #     os: ubuntu-latest,
          #     prefix: arm-linux-gnueabihf,
          #     toolchain: arm-linux-gnueabihf-gcc,
          #   }

    runs-on: ${{ matrix.cfg.os }}
    env:
      PLATFORM: ${{ matrix.cfg.platform }}
    # defaults:
    # run:
    # working-directory: libusb
    # working-directory: ./${{ github.workflow }}
    steps:
      - uses: actions/checkout@v4

      - name: Bash test
        shell: bash
        run: |
          pwd
          ls -alF
          mkdir arwil
          touch arwil/test.txt
          ls -alF > arwil/test.txt
          cat arwil/test.txt
          rm -rf arwil
          ls
          echo "OK"

      - name: Emscripten Install
        if: matrix.cfg.platform == 'emscripten'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.13
          actions-cache-folder: "emsdk-cache"

      # - name: Verify emsdk
      #   if: matrix.cfg.platform == 'emscripten'
      #   run: |
      #     emcc -v
      #     emsdk update
      #     emsdk install latest
      #     emsdk activate latest
      #     emcc -v

      # - name: RPI - apt multistrap
      #   if: matrix.cfg.platform == 'rpi-aarch64' || matrix.cfg.platform == 'rpi-armv6l'
      #   uses: awalsh128/cache-apt-pkgs-action@latest
      #   with:
      #     packages: multistrap gcc-${{matrix.cfg.prefix}} g++-${{matrix.cfg.prefix}}
      #     version: 1.0

      # - name: RPI - multistrap
      #   if: matrix.cfg.platform == 'rpi-aarch64' || matrix.cfg.platform == 'rpi-armv6l'
      #   shell: bash
      #   run: |
      #     mkdir -p raspbian/etc/apt/apt.conf.d/
      #     echo 'Acquire::AllowInsecureRepositories "true";' | sudo tee raspbian/etc/apt/apt.conf.d/90insecure
      #     multistrap -a arm64 -d raspbian -f ../multistrap.conf

      # - name: Apt
      #   if: runner.os == 'Linux'
      #   uses: awalsh128/cache-apt-pkgs-action@latest
      #   with:
      #     packages: libudev-dev
      #     version: 1.0

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.17
        with:
          key: ${{ runner.os }}-${{ matrix.cfg.platform }}-ccache

      - name: Install Chalet
        uses: jaxxstorm/action-install-gh-release@v2.0.0
        with:
          repo: chalet-org/chalet
          cache: enable
          extension: .zip
          prerelease: "false"

      - name: Chalet Test / Version
        run: |
          chalet --version

      - name: Chalet Configure
        if: matrix.cfg.platform == 'emscripten'
        shell: bash
        run: chalet configure --toolchain emscripten

      # - name: Chalet Bundle
      #   if: matrix.cfg.platform != 'ios'
      #   shell: bash
      #   run: |
      #     chalet bundle --compiler-cache --show-commands

      # - name: iOS
      #   if: matrix.cfg.platform == 'ios'
      #   shell: bash
      #   run: |
      #     ./${{ github.workflow }}.sh

      # - name: LS check lib folders
      #   shell: bash
      #   run: |
      #     echo '-------'
      #     ls -alfR build/**/ext.${{ github.workflow }}/
      #     echo '-------'
      #     ls -alfR chalet_external/${{ github.workflow }}/
      #     echo '-------'

      # - name: LS check built lib
      #   shell: bash
      #   run: |
      #     unzip dist/*.zip
      #     ls -alfR dist

      # - name: Rename and Publish Release
      #   shell: bash
      #   env:
      #     GITHUB_TOKEN: ${{ github.TOKEN }}
      #   run: |
      #     mv dist/${{ github.workflow }}.zip oflib_${{ github.workflow }}_${{ matrix.cfg.platform }}.zip
      #     ls -alF *.zip
      #     gh release upload v0.12.1 *.zip --clobber
