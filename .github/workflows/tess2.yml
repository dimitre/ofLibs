name: tess2

on:
  push:
    paths:
      - tess2/**
      - .github/workflows/tess2.yml

permissions:
  contents: write

concurrency:
  # group: ${{ github.workflow }}-${{ github.ref }}
  group: ${{ github.workflow }}
  cancel-in-progress: false

# env:
#   CMAKE_CXX_COMPILER_LAUNCHER: ccache

jobs:
  tess2_matrix:
    strategy:
      matrix:
        include:
          - {
              platform: emscripten,
              os: ubuntu-latest,
              toolchain: emscripten,
              shell: bash,
            }
          - {
              platform: linux64,
              os: ubuntu-latest,
              toolchain: llvm,
              shell: bash,
            }
          - {
              platform: macos,
              os: macos-26,
              toolchain: apple-llvm,
              shell: bash,
            }
          # - {
          #     platform: msys2,
          #     os: windows-latest,
          #     toolchain: gcc,
          #     shell: msys2 -c 'export PATH=$PATH:/c/hostedtoolcache/windows/chalet-org/chalet/latest/windows-x64',
          #     # shell: msys2 -c 'source $GITHUB_ENV; export $(cut -d= -f1 $GITHUB_ENV); {0}'
          #   }

          - {
              platform: vs,
              os: windows-latest,
              toolchain: vs-stable,
              shell: bash,
            }
          - {
              platform: rpi-aarch64,
              os: ubuntu-latest,
              prefix: aarch64-linux-gnu,
              toolchain: aarch64-linux-gnu-gcc,
              shell: bash,
            }

          - {
              platform: msys2,
              os: ubuntu-latest,
              prefix: mingw-w64,
              toolchain: x86_64-w64-mingw32-gcc,
              shell: bash,
            }
          # - {
          #     platform: msys2,
          #     os: windows-latest,
          #     toolchain: gcc,
          #     shell: msys2 -c 'export PATH=$PATH:/c/hostedtoolcache/windows/chalet-org/chalet/latest/windows-x64',
          #     # shell: msys2 -c 'source $GITHUB_ENV; export $(cut -d= -f1 $GITHUB_ENV); {0}'
          #   }

    runs-on: ${{ matrix.os }}
    env:
      PLATFORM: ${{ matrix.platform }}
    defaults:
      run:
        # shell: ${{ matrix.shell }} {0}
        shell: bash
        working-directory: ${{ github.workflow }}

    steps:
      - uses: actions/checkout@v5

      # - name: ccache
      #   uses: hendrikmuhs/ccache-action@v1.2.19
      #   with:
      #     key: ${{ github.workflow }}-${{ runner.os }}-${{ matrix.platform }}-ccache

      - name: MSYS2 Windows
        if: matrix.platform == 'msys2' && runner.os == 'Windows'
        uses: msys2/setup-msys2@v2.28.0
        with:
          pacboy: gcc:p cmake:p
          # pacboy: wget2:p yaml-cpp:p pugixml:p nlohmann-json:p fmt:p toolchain:p openssl:p python:p assimp:p cairo:p curl:p freeglut:p FreeImage:p glew:p glfw:p glm:p libsndfile:p libusb:p libxml2:p mpg123:p openal:p opencv:p rtaudio:p uriparser:p utf8cpp:p
          update: true
          install: >-
            base-devel
          # cmake
      # - name: MSYS2 Apt Cross Compile
      #   if: matrix.platform == 'msys2' && runner.os == 'Linux'
      #   uses: awalsh128/cache-apt-pkgs-action@latest
      #   with:
      #     packages: gcc-${{ matrix.prefix }} g++-${{ matrix.prefix }} binutils-${{ matrix.prefix }}
      #     version: 1.0
      - name: MSYS2 Apt Cross Compile
        if: matrix.platform == 'msys2' && runner.os == 'Linux'
        run: |
          sudo apt install gcc-${{ matrix.prefix }} g++-${{ matrix.prefix }} binutils-${{ matrix.prefix }}

      - name: Emscripten Install
        if: matrix.platform == 'emscripten'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.15
          actions-cache-folder: "emsdk-cache"

      - name: Verify emsdk
        if: matrix.platform == 'emscripten'
        run: |
          emcc -v
          emsdk update
          emsdk install latest
          emsdk activate latest
          emcc -v

      - name: RPI - Apt Cache Packages
        if: matrix.platform == 'rpi-aarch64' || matrix.platform == 'rpi-armv6l'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: multistrap gcc-${{ matrix.prefix }} g++-${{ matrix.prefix }}
          version: 1.0

      # - name: RPI - multistrap
      #   if: matrix.platform == 'rpi-aarch64' || matrix.platform == 'rpi-armv6l'
      #   run: |
      #     mkdir -p raspbian/etc/apt/apt.conf.d/
      #     echo 'Acquire::AllowInsecureRepositories "true";' | sudo tee raspbian/etc/apt/apt.conf.d/90insecure
      #     multistrap -a arm64 -d raspbian -f ../multistrap.conf

      - name: Install Chalet
        uses: jaxxstorm/action-install-gh-release@v2.1.0
        with:
          repo: chalet-org/chalet
          cache: enable
          extension: .zip
          prerelease: "false"

      - name: Add Chalet to Path in Msys2
        if: matrix.platform == 'msys2' && runner.os == 'Windows'
        run: |
          export PATH=$PATH:/c/hostedtoolcache/windows/chalet-org/chalet/latest/windows-x64
          chalet --version

      - name: Chalet Test / Version
        run: |
          chalet --version

      - name: Chalet Configure
        if: matrix.toolchain != ''
        run: chalet configure --toolchain ${{ matrix.toolchain }} -a auto

      - name: Chalet Bundle
        run: |
          chalet bundle --show-commands # --compiler-cache

      - name: LS check built lib
        run: |
          unzip dist/*.zip
          ls -alfR dist

      - name: Rename and Publish Release
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          mv dist/${{ github.workflow }}.zip oflib_${{ github.workflow }}_${{ matrix.platform }}.zip
          ls -alF *.zip
          gh release upload v0.12.1 *.zip --clobber
