name: FreeImage

on:
  push:
    paths:
      - FreeImage/**
      - .github/workflows/FreeImage.yml

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

# env:
#   CMAKE_CXX_COMPILER_LAUNCHER: ccache

jobs:
  FreeImage_matrix:
    strategy:
      # this way macos completes if windows fails
      fail-fast: false
      matrix:
        include:
          - { platform: emscripten, os: ubuntu-latest, toolchain: emscripten }
          - { platform: linux64, os: ubuntu-latest, toolchain: llvm }
          # - { platform: ios, os: macos-26, toolchain: apple-llvm }
          - { platform: macos, os: macos-26, toolchain: apple-llvm }
          # - { platform: macos, os: macos-14, toolchain: apple-llvm }
          - { platform: vs, os: windows-latest, toolchain: vs-stable }
          - {
              platform: rpi-aarch64,
              os: ubuntu-latest,
              prefix: aarch64-linux-gnu,
              toolchain: aarch64-linux-gnu-gcc,
            }
          - {
              platform: rpi-armv6l,
              os: ubuntu-latest,
              prefix: arm-linux-gnueabihf,
              toolchain: arm-linux-gnueabihf-gcc,
            }
          - {
              platform: msys2,
              os: ubuntu-latest,
              prefix: mingw-w64,
              toolchain: x86_64-w64-mingw32-gcc,
              # params: -t gcc -a x86_64-w64-mingw32,
              # shell: bash,
            }
    runs-on: ${{ matrix.os }}
    # env:
    # PLATFORM: ${{ matrix.platform }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workflow }}
    steps:
      - uses: actions/checkout@v5

      # - name: ccache
      #   uses: hendrikmuhs/ccache-action@v1.2.19
      #   with:
      #     key: ${{ github.workflow }}-${{ runner.os }}-${{ matrix.platform }}-ccache

      - name: MSYS2 Apt Cross Compile
        if: matrix.platform == 'msys2' && runner.os == 'Linux'
        run: |
          sudo apt install gcc-${{ matrix.prefix }} g++-${{ matrix.prefix }} binutils-${{ matrix.prefix }}

      - name: macOS Checks
        if: runner.os == 'macOS'
        run: |
          whereis cmake
          cmake --version
          brew install cmake
          whereis cmake
          cmake --version
      #     brew list
      #     brew remove jpeg-turbo
      #     brew remove jpeg

      - name: Emscripten Install
        if: matrix.platform == 'emscripten'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.15
          actions-cache-folder: "emsdk-cache"

      - name: RPI - Cross compiling tools
        if: matrix.platform == 'rpi-aarch64' || matrix.platform == 'rpi-armv6l'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: multistrap gcc-${{ matrix.prefix }} g++-${{ matrix.prefix }}
          version: 1.0

      # - name: RPI - multistrap
      #   if: matrix.platform == 'rpi-aarch64' || matrix.platform == 'rpi-armv6l'
      #   run: |
      #     mkdir -p raspbian/etc/apt/apt.conf.d/
      #     echo 'Acquire::AllowInsecureRepositories "true";' | sudo tee raspbian/etc/apt/apt.conf.d/90insecure
      #     multistrap -a arm64 -d raspbian -f ../multistrap.conf

      # - name: Apt
      #   if: runner.os == 'Linux'
      # uses: awalsh128/cache-apt-pkgs-action@latest
      # with:
      #   packages: libudev-dev
      #   version: 1.0

      - name: Install Chalet
        uses: jaxxstorm/action-install-gh-release@v2.1.0
        with:
          repo: chalet-org/chalet
          cache: enable
          extension: .zip
          prerelease: "false"

      - name: Chalet Test / Version
        run: |
          chalet --version

      - name: Chalet Configure
        if: matrix.platform != 'ios'
        run: chalet configure --toolchain ${{ matrix.toolchain }}

      - name: Chalet Configure IOS
        if: matrix.platform == 'ios'
        run: |
          chalet configure

      - name: Chalet Bundle
        if: matrix.platform != 'ios'
        run: |
          chalet bundle --show-commands
        # chalet bundle --compiler-cache --show-commands

      - name: iOS
        if: matrix.platform == 'ios'
        run: |
          ./${{ github.workflow }}.sh

      - name: LS check built lib
        if: matrix.platform != 'ios'
        run: |
          unzip dist/*.zip
          ls -alfR dist

      - name: Rename and Publish Release
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          mv dist/${{ github.workflow }}.zip oflib_${{ github.workflow }}_${{ matrix.platform }}.zip
          ls -alF *.zip
          gh release upload v0.12.1 *.zip --clobber
