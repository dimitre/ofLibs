name: Build ofLibs

on:
  workflow_call:
    inputs:
      lib: { required: true, type: string }
      version: { required: true, type: string } # git tag to publish under
      multistrap: { required: false, type: boolean } # git tag to publish under
      linux_apt: { required: false, type: string } # git tag to publish under
  # push:
  #   paths:
  #     - assimp/**
  #     - .github/workflows/assimp.yml

permissions:
  contents: write

# concurrency:
#   group: ${{ github.workflow }}
#   cancel-in-progress: false
#
# env:
#   CMAKE_CXX_COMPILER_LAUNCHER: ccache

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { platform: emscripten, os: ubuntu-latest, toolchain: emscripten }
          - { platform: linux64, os: ubuntu-latest, toolchain: llvm }
          - { platform: macos, os: macos-26, toolchain: apple-llvm }
          - { platform: vs, os: windows-latest, toolchain: vs-stable }
          - {
              platform: rpi-aarch64,
              os: ubuntu-latest,
              prefix: aarch64-linux-gnu,
              toolchain: aarch64-linux-gnu-gcc,
            }

          - {
              platform: rpi-armv6l,
              os: ubuntu-latest,
              prefix: arm-linux-gnueabihf,
              toolchain: arm-linux-gnueabihf-gcc,
            }
          - {
              platform: msys2,
              os: ubuntu-latest,
              prefix: mingw-w64,
              toolchain: x86_64-w64-mingw32-gcc,
              # params: -t gcc -a x86_64-w64-mingw32,
              # shell: bash,
            }

    runs-on: ${{ matrix.os }}
    # env:
    #   PLATFORM: ${{ matrix.platform }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.lib }}

    steps:
      - uses: actions/checkout@v5
        # with:
        #   sparse-checkout: ${{ inputs.lib }}

      # - name: Verify sparse checkout
      #   working-directory: .
      #   run: test -d ${{ inputs.lib }}
      # - name: ccache
      #   uses: hendrikmuhs/ccache-action@v1.2.19
      #   with:
      #     key: ${{ inputs.lib }}-${{ runner.os }}-${{ matrix.platform }}-ccache
      - name: Apt Packages
        if: runner.os == 'Linux' && inputs.linux_apt != ''
        # if: matrix.platform == 'linux64' && inputs.linux_apt != ''
        run: |
          sudo apt install ${{ inputs.linux_apt }}
        # sudo apt install libx11-dev libglu1-mesa-dev libgl1-mesa-dev libwayland-dev libxkbcommon-dev xorg-dev libegl1-mesa-dev libopengl-dev libglx-dev libglvnd-dev

      - name: macOS Checks
        if: runner.os == 'macOS'
        run: |
          whereis cmake
          cmake --version
          brew install cmake
          whereis cmake
          cmake --version

      - name: Emscripten Install
        if: matrix.platform == 'emscripten'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.15
          actions-cache-folder: "emsdk-cache"

      - name: Verify emsdk
        if: matrix.platform == 'emscripten'
        run: |
          emcc -v
          emsdk update
          emsdk install latest
          emsdk activate latest
          emcc -v

      - name: MSYS2 Apt Cross Compile
        if: matrix.platform == 'msys2' && runner.os == 'Linux'
        run: |
          sudo apt install gcc-${{ matrix.prefix }} g++-${{ matrix.prefix }} binutils-${{ matrix.prefix }}

      - name: RPI - Apt Cache Cross Compile
        if: matrix.platform == 'rpi-aarch64' || matrix.platform == 'rpi-armv6l'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: multistrap gcc-${{ matrix.prefix }} g++-${{ matrix.prefix }}
          version: 1.0

      - name: RPI - multistrap
        if: (matrix.platform == 'rpi-aarch64' || matrix.platform == 'rpi-armv6l') && inputs.multistrap
        run: |
          mkdir -p raspbian/etc/apt/apt.conf.d/
          echo 'Acquire::AllowInsecureRepositories "true";' | sudo tee raspbian/etc/apt/apt.conf.d/90insecure
          multistrap -a arm64 -d raspbian -f ../multistrap.conf

      - name: Install Chalet
        uses: jaxxstorm/action-install-gh-release@v2.1.0
        with:
          repo: chalet-org/chalet
          cache: enable
          extension: .zip
          prerelease: "false"

      - name: Chalet Test / Version
        run: |
          chalet --version

      - name: Chalet Configure
        run: chalet configure --toolchain ${{ matrix.toolchain }} #-a auto

      - name: Chalet Bundle
        run: |
          chalet bundle --show-commands #--compiler-cache

      - name: LS check built lib
        run: |
          unzip dist/*.zip
          ls -alfR dist

      - name: Rename and Publish Release
        env:
          # GITHUB_TOKEN: ${{ github.TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv dist/${{ inputs.lib }}.zip oflib_${{ inputs.lib }}_${{ matrix.platform }}.zip
          ls -alF *.zip
          gh release upload ${{ inputs.version }} *.zip --clobber
